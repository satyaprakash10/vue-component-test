{"ast":null,"code":"import 'vue-good-table/dist/vue-good-table.css';\nimport { VueGoodTable } from 'vue-good-table';\nexport default {\n  components: {\n    VueGoodTable\n  },\n  props: {\n    tableDataColumns: {\n      type: [Array, Number, String],\n      default: null\n    },\n    tableDataRows: {\n      type: [Array, Number, String],\n      default: null\n    }\n  },\n  data() {\n    return {\n      searchTerm: '',\n      paginationOptions: {\n        enabled: true,\n        mode: 'records',\n        perPage: 3,\n        perPageDropdown: [3, 5, 10, 200, 300, 500, 1000],\n        perPageDropdownEnabled: true,\n        jumpFirstOrLast: true\n      }\n    };\n  },\n  mounted() {\n    console.log(this.tableDataRows);\n  },\n  methods: {\n    onColumnFilter(params) {\n      console.log('on-column-filters:');\n      console.log(params);\n    },\n    onSearch(params) {\n      console.log('on-search:');\n      console.log(params);\n    },\n    autofilter(type) {\n      if (type === 'name') {\n        this.columns[0].filterOptions.filterValue = 'John';\n      }\n      if (type === 'age') {\n        this.columns[1].filterOptions.filterValue = '>30';\n      }\n      if (type === 'reset') {\n        this.columns[0].filterOptions.filterValue = '';\n        this.columns[1].filterOptions.filterValue = '';\n      }\n    },\n    filterAge(data, filterString) {\n      if (filterString === '>30' && parseInt(data, 10) > 30) {\n        return true;\n      }\n      if (filterString === '<=30' && parseInt(data, 10) <= 30) {\n        return true;\n      }\n      return false;\n    }\n  }\n};","map":{"version":3,"mappings":"AAgEA;AACA;AACA;EACAA;IACAC;EACA;EAEAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAC;IACA;EACA;EAEAE;IACA;MACAC;MAEAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC;EACA;EACAC;IACAC;MACAF;MACAA;IACA;IACAG;MACAH;MACAA;IACA;IACAI;MACA;QACA;MACA;MACA;QACA;MACA;MACA;QACA;QACA;MACA;IACA;IACAC;MACA;QACA;MACA;MACA;QACA;MACA;MACA;IACA;EACA;AACA","names":["components","VueGoodTable","props","tableDataColumns","type","default","tableDataRows","data","searchTerm","paginationOptions","enabled","mode","perPage","perPageDropdown","perPageDropdownEnabled","jumpFirstOrLast","mounted","console","methods","onColumnFilter","onSearch","autofilter","filterAge"],"sourceRoot":"src/components","sources":["BaseTable.vue"],"sourcesContent":["<template>\n  <div class=\"\" style=\"background-color: \">\n    <!-- Search Input -->\n\n    <!-- Table content -->\n    <VueGoodTable\n      mode=\"remote\"\n      :columns=\"tableDataColumns\"\n      :rows=\"tableDataRows\"\n      style=\"margin-top: 20px; padding: 20px\"\n      @on-column-filter=\"onColumnFilter\"\n      :search-options=\"{\n        enabled: true,\n      }\"\n      :pagination-options=\"paginationOptions\"\n    >\n      <template slot=\"table-row\" slot-scope=\"{ row, column }\">\n        <template v-if=\"tableDataColumns.name == 'name'\">\n          {{ row.name }}\n        </template>\n\n        <template v-else-if=\"column.field == 'title'\">\n          <nuxt-link :to=\"`/website/pages/edit/${row.id}`\" class=\"block w-full\">\n            <span v-text=\"row.title\"></span>\n          </nuxt-link>\n        </template>\n\n        <template v-else-if=\"column.field == 'published'\">\n          <Badge :dot=\"true\" :color=\"row.published === true ? 'green' : 'gray'\">\n            {{ row.published === true ? 'Published' : 'Hidden' }}\n          </Badge>\n        </template>\n        <template v-else-if=\"column.field == 'actions'\">\n          <div class=\"space-x-4\">\n            <nuxt-link\n              :to=\"`/website/pages/edit/${row.id}`\"\n              class=\"text-gray-600\"\n            >\n              <fa-icon icon=\"edit\" fixed-width />\n            </nuxt-link>\n            <a\n              v-if=\"currentCompany.parent_id === null\"\n              href=\"#\"\n              class=\"text-gray-600 cursor-pointer\"\n              @click.prevent=\"copyRow(row.id)\"\n            >\n              <fa-icon icon=\"copy\" fixed-width />\n            </a>\n\n            <a\n              href=\"#\"\n              class=\"text-gray-600\"\n              @click.prevent=\"deleteRow(row.id)\"\n            >\n              <fa-icon icon=\"trash\" fixed-width />\n            </a>\n          </div>\n        </template>\n      </template>\n    </VueGoodTable>\n  </div>\n</template>\n\n<script>\nimport 'vue-good-table/dist/vue-good-table.css'\nimport { VueGoodTable } from 'vue-good-table'\nexport default {\n  components: {\n    VueGoodTable,\n  },\n\n  props: {\n    tableDataColumns: {\n      type: [Array, Number, String],\n      default: null,\n    },\n    tableDataRows: {\n      type: [Array, Number, String],\n      default: null,\n    },\n  },\n\n  data() {\n    return {\n      searchTerm: '',\n\n      paginationOptions: {\n        enabled: true,\n        mode: 'records',\n        perPage: 3,\n        perPageDropdown: [3, 5, 10, 200, 300, 500, 1000],\n        perPageDropdownEnabled: true,\n        jumpFirstOrLast: true,\n      },\n    }\n  },\n  mounted() {\n    console.log(this.tableDataRows)\n  },\n  methods: {\n    onColumnFilter(params) {\n      console.log('on-column-filters:')\n      console.log(params)\n    },\n    onSearch(params) {\n      console.log('on-search:')\n      console.log(params)\n    },\n    autofilter(type) {\n      if (type === 'name') {\n        this.columns[0].filterOptions.filterValue = 'John'\n      }\n      if (type === 'age') {\n        this.columns[1].filterOptions.filterValue = '>30'\n      }\n      if (type === 'reset') {\n        this.columns[0].filterOptions.filterValue = ''\n        this.columns[1].filterOptions.filterValue = ''\n      }\n    },\n    filterAge(data, filterString) {\n      if (filterString === '>30' && parseInt(data, 10) > 30) {\n        return true\n      }\n      if (filterString === '<=30' && parseInt(data, 10) <= 30) {\n        return true\n      }\n      return false\n    },\n  },\n}\n</script>\n<style scoped>\n.form-input {\n  border: 1px solid blue;\n  border-radius: 10px;\n  padding: 10px;\n  width: 400px;\n}\n.row-style {\n  background-color: red;\n}\n* {\n  font-family: 'Open Sans';\n}\n.red {\n  background-color: red;\n}\n.green {\n  background-color: green;\n}\n/* .vgt-selection-info-row.info-custom{\n    background: red;\n  } */\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}